database=h2

# MySQL Configuration for Patient Records ONLY
# This profile enables MySQL ONLY for patient records
# Main petclinic data (owners, pets, visits, vets) uses H2 database

# Primary DataSource - H2 (Main PetClinic Data)
# H2 handles all petclinic functionality when using MySQL profile
# spring.datasource settings are inherited from default application.properties

# Secondary DataSource - MySQL (Patient Records ONLY)
app.datasource.mysql.jdbc-url=${MYSQL_URL:jdbc:mysql://localhost:3306/patient_records}
app.datasource.mysql.username=${MYSQL_USER:patient_user}
app.datasource.mysql.password=${MYSQL_PASS:patient_pass}
app.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# Connection Pool Settings for MySQL (Patient Records)
app.datasource.mysql.maximum-pool-size=10
app.datasource.mysql.minimum-idle=2
app.datasource.mysql.connection-timeout=20000
app.datasource.mysql.idle-timeout=300000
app.datasource.mysql.max-lifetime=1200000

# Schema and Data Initialization - H2 ONLY (Main PetClinic)
spring.sql.init.mode=always
spring.sql.init.continue-on-error=false
spring.sql.init.separator=;

# MySQL Patient Records - NO AUTO INITIALIZATION
# Patient records schema must be manually created when needed
app.patient.records.auto-init=false
app.patient.records.enabled=${PATIENT_RECORDS_ENABLED:true}

# JPA/Hibernate Settings - H2 (Main PetClinic Data)
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.properties.hibernate.jdbc.batch_size=25
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
spring.jpa.properties.hibernate.jdbc.batch_versioned_data=true

# Application Architecture Settings
app.database.primary=h2
app.database.secondary=mysql
app.database.mode=separated
app.database.primary.purpose=petclinic_data
app.database.secondary.purpose=patient_records_only
